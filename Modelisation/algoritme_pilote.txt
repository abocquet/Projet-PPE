// Vecteurs de l'espace : (x, y, z)
deplacement := (0, 0, 0)
destination := (0, 0, 0)

acceleration := (0, 0, 0) // m.s-2
vitesse      := (0, 0, 0) // m.s
position     := (0, 0, 0) // m

last_time = current_time()

propulsion_verticale := 0 // la force de propulsion du moteur sur z en % de la puissance totale
propulsion_horizontale := 0 // idem sur (x, y)

angle_moteur_gauche = 0
angle_moteur_droit = 0

REPETER
	angle_nord := angle entre le dirigeable et le nord, donné par un compas

	acceleration := acquerir acceleration
	∆t := current_time() - last_time
	last_time := current_time()

	v0 := vitesse 

	vitesse := acceleration.∆t + v0
	deplacement := 1/2 . acceleration . ∆t^2 + v0 . ∆t

	// on situe le déplacement du repère du dirigeable au repère de référence
	position := { cos(angle_nord) -sin(angle_nord)  0 } x { x_deplacement } + position 
				{ sin(angle_nord)  cos(angle_nord)  0 }   { y_deplacement }
				{ 0					0			1 }   { z_deplacement }


	// la position de la destination dans le repere du ballon
	dest := { cos(angle_nord)  sin(angle_nord), 0 } x { x_destination - x_position } 
			{ -sin(angle_nord) cos(angle_nord), 0 }   { y_destination - y_position }
			{ 0 					0 		    1 }   { z_destination - z_position }

	avancer := faux
	tourner := 0 // 1: tourner à droite ; -1: tourner à gauche

	angle_destination := arctan(dest.x / dest.y)
	distance_destination := racine(dest.x ^ 2 + dest.y ^ 2)


	//Gestion de la trajectoire dans le plan
	SI distance_destination > 0.1
	|	ALORS
	|	SI dest.y > 0 ET ENTRE -π/16 et π/16
	|	|	SI vitesse.y > .1 && acceleration.y > 0
	|	|	|	ALORS
	|	|	|	propulsion_horizontale -= .1
	|	|	FIN_SI
	|	|				
	|	|	SI vitesse.y < .1
	|	|	|	ALORS
	|	|	|	propulsion_horizontale += .1
	|	|	FIN_SI
	|	|
	|	SINON
	|	|	propulsion_horizontale := .2
	|	|			
	|	|	SI dest.x < 0
	|	|	|	ALORS
	|	|	|	tourner := -1
	|	|	FIN_SI	
	|	|
	|	|	SINON SI dest.x > 0
	|	|	|	ALORS
	|	|	|	tourner := 1
	|	|	FIN_SI
	|	FIN_SI
	SINON
	|	SI vitesse.y > 0.01 //on ralenti à l'approche de l'objectif
	|	|	propulsion_horizontale := -7
	|	SINON
	|	|	propulsion_horizontale := 0
	|	FIN_SI
	FIN_SI
	

	// on adapte la propulsion verticale
		SI vitesse[2] > 0.1
		|	ALORS
		|	propulsion_verticale--
		|
		|	SI vitesse[2] > 1
		|	|	ALORS	
		|	|	propulsion_verticale -:= 1
		|	FIN_SI
		|
		SINON SI vitesse[2] < - 0.1
		|	ALORS
		|	propulsion_verticale++
		|
		|	SI vitesse[2] < -1
		|	|	ALORS	
		|	|	propulsion_verticale +:= 1
		|	FIN_SI
		|
		SINON SI position[2] < destination[2]
		|	ALORS
		|	propulsion_verticale+
		SINON if (position[2] > destination[2]
		|	ALORS
		|	propulsion_verticale--
		FIN_SI
	
	
	//On réajuste ensuite les demandes moteur
		SI propulsion_verticale > 100
		|	ALORS
		|	propulsion_verticale := 100
		SINON SI propulsion_verticale < 1
		|	ALORS
		|	propulsion_verticale := 1
		FIN_SI
	
		SI propulsion_horizontale > 100
		|	ALORS
		|	propulsion_horizontale := 100
		SINON SI propulsion_horizontale < -100
		|	ALORS
		|	propulsion_horizontale := -100
		FIN_SI
	
	norme := RACINE(CARRE(propulsion_verticale,2) + CARRE(propulsion_horizontale,2))
	
	// si on demande une trop forte poussée aux moteurs, on réajuste la demande
	// en donnant la priorité à la poussée verticale
	SI norme > 100
	|	ALORS
	|	norme := 100
	|	signe := propulsion_horizontale < 0 ? -1 : 1
	|	propulsion_horizontale := signe * RACINE(CARRE(norme, 2) - CARRE(propulsion_verticale,2))	
	FIN_SI

	SI tourner != 0
	|	ALORS
	|	angle_moteur_gauche *= tourner
	|	angle_moteur_droite *= -tourner
	FIN_SI


	//On agit ensuite sur les moteurs: chaque moteur tourne à la même vitesse, avec un angle possiblement différent
	adapter_propulsion(angle_moteur_gauche, angle_moteur_droit, norme)

FIN_REPETER