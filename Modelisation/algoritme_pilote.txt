// Vecteurs de l'espace : (x, y, z)
deplacement := (0, 0, 0)
destination := (0, 0, 0)

acceleration := (0, 0, 0) // m.s-2
vitesse      := (0, 0, 0) // m.s
position     := (0, 0, 0) // m

last_time = current_time()

propulsion_verticale := 0 // la force de propulsion du moteur sur z en % de la puissance totale
propulsion_horizontale := 0 // idem sur (x, y)

angle_moteur_gauche = 0
angle_moteur_droit = 0

REPETER
	angle_nord := angle entre le dirigeable et le nord, donné par un compas

	acceleration := acquerir acceleration
	∆t := current_time() - last_time
	last_time := current_time()

	v0 := vitesse 

	vitesse := acceleration.∆t + v0
	deplacement := 1/2 . acceleration . ∆t^2 + v0 . ∆t

	// on situe le déplacement du repère du dirigeable au repère de référence
	position := { cos(angle_nord) -sin(angle_nord)  0 } x { x_deplacement } + position 
				{ sin(angle_nord)  cos(angle_nord)  0 }   { y_deplacement }
				{ 0					0			1 }   { z_deplacement }


	// la position de la destination dans le repere du ballon
	dest := { cos(angle_nord)  sin(angle_nord), 0 } x { x_destination - x_position } 
			{ -sin(angle_nord) cos(angle_nord), 0 }   { y_destination - y_position }
			{ 0 					0 		    1 }   { z_destination - z_position }

	avancer := faux
	tourner := 0 // 1: tourner à droite ; -1: tourner à gauche

	angle_destination := arctan(dest.x / dest.y)
	distance_destination := racine(dest.x ^ 2 + dest.y ^ 2)


	//Gestion de la trajectoire dans le plan
	SI(distance_destination > 0.5)
	|	ALORS
	|	SI(dest.y > 0 ET angle_destination ENTRE ( -π/16 et π/16))
	|	|	ALORS
	|	|	avancer := vrai
	|	SINON SI dest.x < 0
	|	|	ALORS
	|	|	tourner := -1
	|	SINON SI dest.x > 0
	|	|	tourner := 1
	|	|	FIN_SI
	|	FIN_SI

	//Une fois prise la décision, on adapte la propulsion verticale...
	SI position.z < destination.z
	|	ALORS
	|	SI vitesse.z > 1 ET acceleration.z > 0
	|	|	ALORS
	|	|	propulsion_verticale = propulsion_verticale - 1 
	|	FIN_SI
	|
	|	SINON SI vitesse.z < 1
	|	|	ALORS
	|	|	propulsion_verticale = propulsion_verticale + 1
	|	FIN_SI
	
	SINON SI position.z > destination.z ET vitesse.z > 0
	|	ALORS
	|	propulsion_verticale -= 1

	//... horizontale en tranlsation
	SI avancer = VRAI
	|	ALORS
	|	SI vitesse.y > 1 ET acceleration.y > 0
	|	|	ALORS
	|	|	propulsion_horizontale = propulsion_horizontale - 1 
	|	|
	|	FIN_SI
	|
	|	SINON SI vitesse.y < 1
	|	|	ALORS
	|	|	propulsion_horizontale = propulsion_horizontale + 1
	|	FIN_SI
	FIN_SI

	norme = propulsion_verticale + propulsion_horizontale

	SI norme > 100
	|	ALORS
	|	norme = 100
	|	propulsion_horizontale = norme - propulsion_verticale //On donne la priorité à la suspension en l'air

	angle_moteur_gauche = arctan(propulsion_horizontale / propulsion_verticale)
	angle_moteur_droite = arctan(propulsion_horizontale / propulsion_verticale)

	SI tourner != 0
	|	ALORS
	|	angle_moteur_gauche *= tourner
	|	angle_moteur_droite *= -tourner
	FIN_SI


	//On agit ensuite sur les moteurs: chaque moteur tourne à la même vitesse, avec un angle possiblement différent
	adapter_propulsion(angle_moteur_gauche, angle_moteur_droit, norme)

FIN_REPETER